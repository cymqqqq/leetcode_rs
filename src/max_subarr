/*
Maximum Subarray
Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.
Example 1:

Input: nums = [-2,1,-3,4,-1,2,1,-5,4]
Output: 6
Explanation: [4,-1,2,1] has the largest sum = 6.
Example 2:

Input: nums = [1]
Output: 1
Example 3:

Input: nums = [0]
Output: 0
Example 4:

Input: nums = [-1]
Output: -1
Example 5:

Input: nums = [-100000]
Output: -100000
*/
pub fn max_sub_array(nums: &mut Vec<i32>) -> i32 {
    let mut prev = 0;
    let mut max = i32::MIN;
    let n = nums.len();
    for i in 0..n-1 {
        prev = nums[i].max(prev + nums[i]);
        max = max.max(prev);
    }
    max

}
fn main() {
    let mut a = vec![-2, 1, -3, 4, -1, 2, 1, -5, 4];
    println!("{:?}", max_sub_array(&mut a));
}
